<templateSet group="Python">
  <template name="super" value="super().$method$($end$)" description="'super(...)' call" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="pyFunctionName()" defaultValue="" alwaysStopAt="false" />
    <variable name="end" expression="" defaultValue="" alwaysStopAt="true" />
  </template>
  <template name="print blank line" value="print(&quot;&quot;)" description="print blank line" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="print f string" value="print(f'{}')" description="print f string" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
  <template name="unit dialog" value="@mock.patch('core.base.SuperManager.SuperManager')&#10;&#9;def test_NAME_OF_TEST_METHOD(self, mock_superManager):&#10;&#9;&#9;class DialogSession:&#10;&#10;&#9;&#9;&#9;def __init__(self, slotsAsObjects: dict):&#10;&#9;&#9;&#9;&#9;self.slotsAsObjects = slotsAsObjects&#10;&#10;&#10;&#9;&#9;&#9;@property&#10;&#9;&#9;&#9;def sessionId(self) -&gt; str:&#10;&#9;&#9;&#9;&#9;return 'unittest'&#10;&#10;&#10;&#9;&#9;&#9;def slotValue(self, slotName: str, index: int = 0, defaultValue: Any = None) -&gt; Any:&#10;&#9;&#9;&#9;&#9;try:&#10;&#9;&#9;&#9;&#9;&#9;return self.slotsAsObjects[slotName]&#10;&#9;&#9;&#9;&#9;except (KeyError, IndexError):&#10;&#9;&#9;&#9;&#9;&#9;return defaultValue&#10;&#10;&#10;&#9;&#9;class LanguageManager:&#10;&#10;&#9;&#9;&#9;@property&#10;&#9;&#9;&#9;def activeLanguage(self) -&gt; str:&#10;&#9;&#9;&#9;&#9;return 'en'&#10;&#10;&#10;&#9;&#9;&#9;@property&#10;&#9;&#9;&#9;def supportedLanguages(self) -&gt; list:&#10;&#9;&#9;&#9;&#9;return ['en']&#10;&#10;&#10;&#9;&#9;# mock SuperManager&#10;&#9;&#9;mock_superManagerInstance = MagicMock()&#10;&#9;&#9;mock_superManager.getInstance.return_value = mock_superManagerInstance&#10;&#9;&#9;mock_superManagerInstance.talkManager.randomTalk.return_value = 'unittest'&#10;&#10;&#9;&#9;mock_languageManager = PropertyMock(return_value=LanguageManager())&#10;&#9;&#9;type(mock_superManagerInstance).languageManager = mock_languageManager&#10;&#10;&#9;&#9;skill = OvenTemperatureConversion()&#10;&#10;&#9;&#9;# If slot is missing&#10;&#9;&#9;session = DialogSession({})&#10;&#9;&#9;# send a blank session to the method&#10;&#9;&#9;skill.gasMarkIntent(session)&#10;&#9;&#9;mock_superManagerInstance.talkManager.randomTalk.assert_called_once_with(skill='OvenTemperatureConversion', talk='respondNoIdea')&#10;&#9;&#9;mock_superManagerInstance.reset_mock()" description="test case for dialog session" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Python" value="true" />
    </context>
  </template>
</templateSet>